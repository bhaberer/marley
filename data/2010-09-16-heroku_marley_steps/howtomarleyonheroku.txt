{{
categories:
  - ruby
  - marley
  - git
  - heroku
image_id: 2827587360
}}

# Blogging with Marley on Heroku. (2010/)

A quick run through the steps that I took to get Marley up and running on heroku.

Marley is a super simple blogging tool, and Heroku is a super easy to use webapp host. Uniting the two to creates an elegant blogging solution for those of us who hate typing in textfields. This is an expanded post of what it took to get it running, credit goes to @jkvor for the [initial post on how he got his working](http://jkvor.com/marley-heroku-blogging). I hit some odd issues and deprecations, so I thought I would post a far more verbose guide.
   
This guide assumes a few things:

- You have accounts on [Heroku](http://heroku.com) and [GitHub](http://github.com).
- You have used Git before, and have some vague idea of how things work.
- You're comfortable on the command line, and have some idea how to get a programming environment going. 

### Setting up your own copy of Marley. 

You'll want to head over to [http://github.com/karmi/marley](http://github.com/karmi/marley) and fork that repo.

Once you've finished the fork, go ahead and clone the repo on your machine.

    git clone git@github.com:<your github username>/marley.git

Now we have a whole suite of small changes to make. 

- Create a .gems file, with the following content:
        rdiscount
        rack-rewrite
        sinatra
        rack
        thin
        activerecord --version 2.3.8
        builder
        capistrano
        sqlite3-ruby
- Open the file `app/marley.rb` and `Rackfile` and change the line 
        require 'activerecord'
    To read:
        require 'active_record'
- Open the file `app/marley.rb` in the authorized? method change 'Marley::Configuration.admin.password' to ENV['ADMIN_PASS']
        def authorized?
          return false unless Marley::Configuration.admin.username && Marley::Configuration.admin.password
          @auth ||=  Rack::Auth::Basic::Request.new(request.env)
          @auth.provided? && @auth.basic? && @auth.credentials && @auth.credentials == [Marley::Configuration.admin.username, ENV['ADMIN_PASS']]
        end
- Open the file `app/lib/comment.rb` and update the named scopes to use the new format
    So...
        named_scope :recent,   :order => 'created_at DESC', :limit => 50
        named_scope :ham,  :conditions => { :spam => false }
        named_scope :spam, :conditions => { :spam => true }
    Becomes:
        scope :recent,   :order => 'created_at DESC', :limit => 50
        scope :ham,  :conditions => { :spam => false }
        scope :spam, :conditions => { :spam => true }
- Copy the config example it normal place, and then edit the values to be correct. You'll want to set the data directory to "data" (instead of '../data') and remove the line with the admin password, we'll take care of that with a Heroku config variable. Be sure to toss your Akismet ([You can get an Akismet API key for free on their site](http://akismet.com/personal/)) stuff in there as you really want to have spam filtering. 
        cp config/config.example.yml config/config.yml
- Run 'rake app:install', install anything it complains about. 

Assuming you didn't see any errors, load up http://localhost:4567/ and see your spartan new blog.

### Getting it onto Heroku.

- Alter your .gitignore file, removing the `data` and `config/config.yml` lines. You need to make sure that you do this or you won't actually check in and deploy files that are needed.
- Remove the git submodules.
        git rm vendor/sinatra-sinatra
        git rm .gitmodules
- Push all the changes you've made to github.
        git add *
        git add .gems
        git commit -a -m 'Configuring Marley'
        git push origin master
- Create a Heroku instance for the blog.
        heroku create myblogname
- Add a Heroku config var for your admin password, we do this so that you can use git without fear of evil spammers (or your jerk friends) stealing your admin password, and marking spam incorrectly! The horror!
        heroku config:add ADMIN_PASS=foo
- If you're using a custom domain name
        heroku addons:add custom_domains:basic
        heroku domains:add www.yourdomain.com
- Push your blog to to Heroku!
        git push heroku master

Wheee! Your blog should now be up on Heroku. You'll probably want to remove the default blog entry after you confirm everything works. You create entries by adding folders and files to the data directory. Take a look at the test article before you delete it to see how the file formatting works.  
